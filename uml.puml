@startuml
skinparam classAttributeIconSize 0

hide class circle
hide interface circle
hide abstract circle

class JFrame {
    - title : String
    - width : int
    - height : int
    - visible : boolean
    + JFrame( )
    + JFrame(String)
    + getHeight( ) : int
    + getWidth( ) : int
    + isVisible( ) : boolean
    + setSize(int, int) : void
    + setVisible(boolean) : void
}

class Tablero extends JFrame {
    + shotgun : ImageIcon
    + corazonLleno : ImageIcon
    + fondo : ImageIcon
    + imagenP1 : ImageIcon
    + imagenP2 : ImageIcon
    + balaAzulIcon : ImageIcon
    + balaRojaIcon : ImageIcon
    + cajaIcon : ImageIcon
    + imagenJugadorActual : JLabel
    + panelVidasJ1 : JPanel
    + panelVidasJ2 : JPanel
    + panelInventario : JPanel
    + logEventos : JTextArea
    + escopeta : Escopeta
    + turnoJugador1 : boolean
    + jugador1 : Jugador
    + jugador2 : Jugador
    + Tablero()
    + createContents() : void
    + actualizarVidas(JPanel panelVidas, int vidas) : void
    + mostrarOpcionesEscopeta() : void
    + verificarGanador() : void
    + cambiarTurno(); : void
    + mostrarInventario(Jugador jugador) : void
    + seleccionar Inventario(Jugador jugador) : void
    + mostrarInformacionEscopeta(JTextArea logEventos) : void
    + usarCajaDelJugador(Jugador jugadorActual, Jugador jugador2, Escopeta escopeta) : void
    + repartirCajaJugador(Jugador jugador) : void
}

interface DanioBala <<interface>> {
    +int DANIO_NORMAL
}

class Escopeta implements DanioBala {
    - balas : ArrayList<String>
    - random : Random
    - balaSierra = false : boolean
    + Escopeta()
    + cargarBalas() : void
    + getMunicion() : ArrayList<String>
    + disparar(Jugador j) : void
    + esBalaSierra(boolean esSierra) : boolean
}

class Jugador{
    - nombre : String
    - vida=4 : int 
    - obs : CajaDeObjetos
    - esposado = false : boolean
    - botones : ArrayList<JButton>
    - objeto : Objeto
    + jugador(String nombre)
    + jugador()
    + aumentarVida () : void
    + reducirVida(int cantidad) : void
    + mostrarObjetos() : void
    + repartirObjetos() : void
    + seleccionarObjeto(CountDownLatch latch) : void
    + objeto_a_Usar() : Objeto
    + setEstaEsposado(boolean estaEsposado) : void
    + estaEsposado() : boolean
    + getVida() : int
    + getNombre() : String
    + getCajaObjetos() : CajaDeObjetos
}

class Objeto {
    - static contador = 0 : int
    - id : int
    + Objeto()
    + getId() : int
}

class Cigarro extends Objeto {
    + utilizarCigarro(Jugador j) : void
}

class Lupa extends Objeto {
    + UsarLupa(Escopeta e) : void
    + crearContenedor(JFrame ventana, ArrayList<String> balas) : void
}

class Cerveza extends Objeto {
    - bala : String
    + UsarCerveza(Escopeta e, JFrame ventanaPrincipal) : void
    + Escopeta e, JFrame ventanaPrincipal : void
}

class Adrenalina extends Objeto {
    - botones : ArrayList<JButton>
    - obs : ArrayList<CajaDeObjetos>
    - misObs : ArrayList<CajaDeObjetos>
    - ventana : JFrame;
    - cierreAutomatico : Timer
    + recibirCajaDelJugador(ArrayList<CajaDeObjetos> obs) : void
    + usarAdrenalina(CajaDeObjetos enemigo) : void
    + crearContenedor() : void
    + llenarBotones() : void
}

class Esposa extends Objeto {
    + usarEsposa(Jugador j) : void
}

class Sierra extends Objeto {
    + static DOBLE = 2 : int
    + usarSierra(Escopeta e) : void
}

class CajaDeObjetos {
    - caja : ArrayList<Objeto>
    - botones : ArrayList<JButton>
    - ventana : JFrame
    - static MAX_OBJETOS = 8 : int
    + entregarCaja() : void
    + mostrarCaja() : void
    + crearContenedor() : void
    + llenarBotones() : void
    + getCaja() : ArrayList<Objeto>
    + getBotones() : ArrayList<JButton>
    + getVentana() : JFrame
}

class IniciarJuego {
    + main(String[] args) : void
}
IniciarJuego ..> Tablero
Tablero ..> Jugador
Tablero ..> Escopeta
Objeto --* Jugador
CajaDeObjetos --* Jugador
Escopeta --* Jugador
Objeto --* CajaDeObjetos
CajaDeObjetos --* Adrenalina
@enduml

